// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ProTasker.Infrastructure.Data;

#nullable disable

namespace ProTasker.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251026215345_UpdateSeedData")]
    partial class UpdateSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ProTasker.Domain.Entities.ProjectTask", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AssignedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("TeamId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            AssignedUserId = new Guid("33333333-3333-3333-3333-333333333333"),
                            CreatedAt = new DateTime(2025, 10, 26, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Initialize project repository and structure",
                            Status = "Todo",
                            TeamId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Title = "Setup Project"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            AssignedUserId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 10, 26, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            Description = "Create database schema and tables",
                            Status = "InProgress",
                            TeamId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Title = "Design Database"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            AssignedUserId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 10, 26, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Develop REST API endpoints",
                            Status = "Todo",
                            TeamId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Title = "API Implementation"
                        });
                });

            modelBuilder.Entity("ProTasker.Domain.Entities.TaskHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NewValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PerformedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PerformedByUserId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskHistories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ffffffff-ffff-ffff-ffff-ffffffffffff"),
                            Action = "Created",
                            CreatedAt = new DateTime(2025, 10, 26, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            PerformedByUserId = new Guid("33333333-3333-3333-3333-333333333333"),
                            TaskId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-ffff-ffff-ffff-ffffffffffff"),
                            Action = "Updated",
                            CreatedAt = new DateTime(2025, 10, 26, 12, 45, 0, 0, DateTimeKind.Unspecified),
                            PerformedByUserId = new Guid("44444444-4444-4444-4444-444444444444"),
                            TaskId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd")
                        });
                });

            modelBuilder.Entity("ProTasker.Domain.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LeaderId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Description = "First Team",
                            LeaderId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Name = "Alpha Team"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Description = "Second Team",
                            LeaderId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Name = "Beta Team"
                        });
                });

            modelBuilder.Entity("ProTasker.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Email = "admin@protasker.com",
                            PasswordHash = "hashedpassword",
                            Role = "Admin",
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Email = "teamleader@protasker.com",
                            PasswordHash = "hashedpassword",
                            Role = "TeamLeader",
                            UserName = "TeamLeader"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Email = "member@protasker.com",
                            PasswordHash = "hashedpassword",
                            Role = "Member",
                            UserName = "Member"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Email = "alice@protasker.com",
                            PasswordHash = "hashedpassword",
                            Role = "Member",
                            UserName = "Alice"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Email = "bob@protasker.com",
                            PasswordHash = "hashedpassword",
                            Role = "TeamLeader",
                            UserName = "Bob"
                        });
                });

            modelBuilder.Entity("ProTasker.Domain.Entities.ProjectTask", b =>
                {
                    b.HasOne("ProTasker.Domain.Entities.User", "AssignedUser")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProTasker.Domain.Entities.Team", "Team")
                        .WithMany("Tasks")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedUser");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProTasker.Domain.Entities.TaskHistory", b =>
                {
                    b.HasOne("ProTasker.Domain.Entities.User", "PerformedByUser")
                        .WithMany("TaskHistories")
                        .HasForeignKey("PerformedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ProTasker.Domain.Entities.ProjectTask", "Task")
                        .WithMany("Histories")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("PerformedByUser");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("ProTasker.Domain.Entities.Team", b =>
                {
                    b.HasOne("ProTasker.Domain.Entities.User", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Leader");
                });

            modelBuilder.Entity("ProTasker.Domain.Entities.User", b =>
                {
                    b.HasOne("ProTasker.Domain.Entities.Team", "Team")
                        .WithMany("Members")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("ProTasker.Domain.Entities.ProjectTask", b =>
                {
                    b.Navigation("Histories");
                });

            modelBuilder.Entity("ProTasker.Domain.Entities.Team", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ProTasker.Domain.Entities.User", b =>
                {
                    b.Navigation("TaskHistories");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
